// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Form {
  id             Int       @id @default(autoincrement())
  uuid           String    @unique @db.Char(36) @map("uuid")
  title          String    @db.VarChar(255) @map("title")
  description    String    @db.VarChar(255) @map("description")
  enabled        Boolean   @map("enabled")
  numberingStyle Int       @map("numbering_style")
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  deletedAt      DateTime? @map("deleted_at")
  fields         FormField[]
  submissions    FormSubmission[]

  @@map("forms")
}

model FormField {
  id          Int       @id @default(autoincrement())
  uuid        String    @unique @db.Char(36) @map("uuid")
  title       String    @map("title")
  description String    @map("description")
  regex       String    @map("regex")
  required    Boolean   @map("required")
  published   Boolean   @default(false) @map("published")
  config      Json      @map("config")
  formId      Int       @map("form_id")
  form        Form      @relation(fields: [formId], references: [id])
  controlId   Int       @map("control_id")
  controlType String    @db.VarChar(36) @map("control_type")
  controlName String    @db.VarChar(36) @map("control_name")
  sort        Int       @default(0) @map("sort")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  @@map("form_fields")
}

model FormSubmission {
  id        Int       @id @default(autoincrement())
  formId    Int       @map("form_id")
  data      Json      @map("data")
  createdAt DateTime  @default(now()) @map("created_at")
  deletedAt DateTime? @map("deleted_at")
  form      Form      @relation(fields: [formId], references: [id])

  @@map("form_submissions")
}

model Option {
  id    Int    @id @default(autoincrement())
  name  String @unique @db.VarChar(255) @map("name")
  value Json   @map("value")

  @@map("options")
}

model MenuItem {
  id        Int        @id @default(autoincrement())
  title     String     @db.VarChar(255) @map("title")
  url       String?    @db.VarChar(255) @map("url")
  icon      String?    @db.VarChar(255) @map("icon")
  parentId  Int?       @map("parent_id")
  parent    MenuItem?  @relation("MenuItemChildren", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemChildren")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  status    Int        @default(0) @map("status")

  @@map("menu_items")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id        String    @id @default(cuid())
  username  String?   @unique @db.VarChar(255) @map("username")
  avatar    String?   @db.VarChar(255) @map("avatar")
  email     String    @unique @db.VarChar(255) @map("email")
  password  String?   @db.VarChar(255) @map("password")
  nickname      String?   @db.VarChar(255) @map("nickname")
  emailVerified DateTime? @map("email_verified")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  lastLoginedAt DateTime? @default(now()) @map("last_logined_at")
  status    Int       @default(0) @map("status")
  
  accounts Account[]
  sessions Session[]

  @@map("users")
}
